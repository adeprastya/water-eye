openapi: 3.0.0
info:
  title: Water Eye
  version: 1.0.0
  description: API for a mobile app to assess water quality with features for authentication, scanning, history tracking, and profile management.

servers:
  - url: https://api.watereye.com

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        email:
          type: string
          example: "user@example.com"
        # password:
        #   type: string
        #   example: "hashedpassword123"
        name:
          type: string
          example: "John Doe"
        picture:
          type: string
          example: "https://example.com/profile.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2024-11-14T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-11-15T12:00:00Z"

    Scan:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        image:
          type: string
          example: "https://example.com/image.jpg"
        location:
          type: object
          properties:
            longitude:
              type: string
            latitude:
              type: string
        result:
          type: object
          properties:
            quality:
              type: string
              example: "Good"
            analysis:
              type: string
              example: "The water quality is good."
            recommendation:
              type: string
              example: "Water quality is good, no further action required."
        createdAt:
          type: string
          example: "2024-11-14T10:00:00Z"

    Track:
      type: object
      properties:
        id:
          type: string
          example: "12345"
        name:
          type: string
          example: "My Pool"
        createdAt:
          type: string
          example: "2024-11-14T10:00:00Z"

  responses:
    BadRequestError:
      description: Invalid request data
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Invalid request data or missing required fields"

    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Access not allowed"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Something in server is broken"

security:
  - BearerAuth: []

paths:
  /auth/signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                picture:
                  type: string
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User created successfully"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "409":
          description: Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Email already exists"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/signin:
    post:
      summary: Sign in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successfully signed in
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Signin account success"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "Bearer <token>"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          description: Wrong Email or Password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Email or Password incorrect"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/signout:
    post:
      summary: Sign out a user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully signed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Signout account success"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/{user_id}:
    get:
      summary: Get user data
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        "200":
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User data retrieved successfully"
                  data:
                    $ref: "#/components/schemas/User"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      summary: Update user data
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                picture:
                  type: string
      responses:
        "200":
          description: User data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User data updated successfully"
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete user account
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        "200":
          description: User account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User account deleted successfully"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/{user_id}/scans?page={page}:
    get:
      summary: Fetch all scan history for a user
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
        - in: query
          name: page
          required: false
          schema:
            type: integer
            example: 1
          description: The page number for pagination
      responses:
        "200":
          description: Scan history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Scan history retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Scan"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Scan an image for water quality assessment
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Image processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Image processed successfully"
                  data:
                    type: object
                    properties:
                      quality:
                        type: string
                        example: "Good"
                      analysis:
                        type: string
                        example: "Analysis for water quality"
                      recommendation:
                        type: string
                        example: "Recommendation for water management"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/{user_id}/upgrade:
    patch:
      summary: Upgrade user account to premium
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        "200":
          description: User account upgraded to premium successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "User account upgraded to premium successfully"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/{user_id}/track/:
    get:
      summary: Fetch all track
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        "200":
          description: Tracks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Tracks retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Track"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a new track
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "My Pool"
      responses:
        "200":
          description: Track created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Track created successfully"
                  data:
                    $ref: "#/components/schemas/Track"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/{user_id}/track/{track_id}:
    delete:
      summary: Delete a track
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
        - in: path
          name: track_id
          required: true
          schema:
            type: string
          description: ID of the track
      responses:
        "200":
          description: Track deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Track deleted successfully"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    get:
      summary: Get scan history in a track
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
        - in: path
          name: track_id
          required: true
          schema:
            type: string
          description: ID of the track
      responses:
        "200":
          description: Track retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Track retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Scan"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Post a scan to a track
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
          description: ID of the user
        - in: path
          name: track_id
          required: true
          schema:
            type: string
          description: ID of the track
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  example: "https://example.com/image.jpg"
      responses:
        "200":
          description: Scan posted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Scan posted successfully"
                  data:
                    type: object
                    items:
                      $ref: "#/components/schemas/Scan"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
